FSAD SEC-2 

 

 

HTML 

 

-> tag : any text enclosed within <> 

ex: <h1> <html> <body> <title> etc. 

 

->text rendering tags 

<b>hi</b> 

<img src="klu.jpg" style="height=200;width=200;" alt="></img> (inline-" ; ; ") 

 

attribute: 

<html> 

<head> 

<style> 

img{ 

height:200; 

weight:200; 

} 

</style> 

</head> 

<body> 

<img src="img1.png"> 

<img src="img2.png"> 

</body> 

</html> 

 

<div> 

styles like display: block, display: inline-block 

styles like display: flex, display: inline-flex 

display-block=> vertical 

display-inline-block=> horizontal 

 

 

---------> 

<div> => row by row displaying 

*{ } => apply for all - HTML,CSS 

.class name => class selector 

#id => id selector 

element selector=> using tag name directly 

<html> 

<head> 

<title>First Web Page</title> 

<style> 

*{ 

 

} 

.container1{ 

   border:1px solid red; 

   display:inline-block;  

} 

.container2{ 

   border:1px solid blue; 

   display:inline-block; 

} 

div1{ 

} 

div2{ 

} 

div3{ 

} 

</style> 

</head> 

<body> 

<div class="container1"> 

<div class="div1">FSAD</div> 

<div class="div2">AOOP</div> 

<div class="div3">DAA</div> 

</div> 

<div class="container2"> 

<div class="div1">java</div> 

<div class="div2">pnc</div> 

<div class="div3">ctsd</div> 

</div> 

</body> 

</html> 

 

 

 

 

iframe: 

-> by using the iframe tag we can  

1. map geolocation 

2. include pdf document 

3. include youtube videos 

4. add another document(ex: another html content) 

5. add Wikipedia content. 

 

 

 

 

 

colspan => to merge two columns 

rowspan => to merge two rows 

=> table 

<table> - to create a table 

<tr> - to create row inputs 

<td> - table data 

 

<table> 

<tr> 

<th>SID</th><th>SNAME</th><th>COURSE</th> 

</tr> 

</table> 

<tr> 

<td>100</td><td>RAJ</td><td>FSD</td> 

</tr> 

 

 

 

==> symbols for some pre defined classes in html: 

rupee symbol: fa fa-rupee 

dollar symbol: fa fa-dollar 

edit symbol: fa fa-edit 

delete symbol: fa fa-trash 

 

 

=> pseudo classes 

-> :operator 

ex:-  

tr: nth-child(even) 

background-color:red 

=> pseudo elements 

 

 

 

 

positions: 

-> absolute 

-> relative 

-> sticky 

-> static 

 

left: 20px (moving towards right) 

right: (moving towards left) 

top: moving towards down 

bottom: moving towards up 

 

 

div n times: div*n 

div*n.common -> to create n number of classes 

div*n.common.x -> to get classes as common x 

 

 

 

-> using relative(position) we can change the row position 

 

 

 

====> REACT JS 

 

<form action=""name=""method=""class=""id=""> 

<input type="text"(text type message) 

type="password"(password type that can show or hide with dots) 

type="number"(entering number) 

type="email"(to type email) 

type="date"(selecting date) 

type="radio"(selecting only one option) 

type="checkbox"(selecting multiple checkboxes)  

type="select"(after selecting there will be drop down) 

type="textarea"(text more than one row) 

type="file"(for uploading files) 

</form> 

 

 

-> whatever we are creating html and CSS, that is "static page". 

-> JSON = JavaScript object notation 

-> JavaScript is object-based and not object oriented. 

 

-> without export (export default <component_name>) the code will not run and shows empty in the webpage. 

 

 

 

 

=> arrow function in JavaScript: 

-------------------------------- 

-> it was introduced from ES6 version(ECMA script) 

 

const var_name=([param-1,param-2,....])=>{    //[param-1,param-2,...] => [  ] means optional 

//statements 

//return statements 

} 

 

create react component using arrow function: 

-------------------------------------------- 

 

const Login = () => { 

return( 

<> 

  <div> 

<h1>Login Form soon</h1> 

  </div> 

</> 

) 

} 

export default Login; 

 

 

 

 

=>Whatever we type in the address bar is called API or endpoint 

=>Backend Technologies(configuration& business logic)- 

                                            Servlets 

                                                   | 

                                                JSP 

                                                   | 

                                              STRUTS 

                                                   | 

                                              Spring 

                                                   | 

                                               Spring Boot(microservices) 

=>Applications are of two types  

                                               1.Monolithic(If one module is having error, remaining also will stop loading) 

                                               2.Microservices(Create individual services ex:- payment service, selection                                                                                                                                                                                                                                                            service etc) 

=>Framework is already provided code, we can modify it. 
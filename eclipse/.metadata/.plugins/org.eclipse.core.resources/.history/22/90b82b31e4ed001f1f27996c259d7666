package com.aoop.designpatterns;

import java.util.Scanner;

interface TravelStrategy{
	public void gotoAirport();
}
class TaxiStrategy implements TravelStrategy{
	public void gotoAirport() {
		System.out.println("travelling by taxi with 300rs");
	}
}
class AutoStrategy implements TravelStrategy{
	public void gotoAirport() {
		System.out.println("travelling by auto with 400rs");
	}
}
class BusStrategy implements TravelStrategy{
	public void gotoAirport() {
		System.out.println("travelling by bus with 200rs");
	}
}
class TrainStrategy implements TravelStrategy{
	public void gotoAirport() {
		System.out.println("travelling by train with 100 rs");
	}
}
class TravelContext{
	private TravelStrategy travelStrategy;
	public void setTravelStrategy(TravelStrategy strategy) {
		this.travelStrategy=strategy;
	}
	public TravelStrategy getTravelStrategy() {
		return travelStrategy;
	}
	public void gotoAirport() {
		travelStrategy.gotoAirport();
	}
}
public class Traveler {
	public static void main(String[] args) {
		System.out.println("please enter the type of travel: bus or train or taxi or auto");
		Scanner sc=new Scanner(System.in);
		String travelType=sc.next();
		System.out.println("travel type is:"+travelType);
		TravelContext ctx=new TravelContext();
		if("bus".equalsIgnoreCase(travelType)) {
			ctx.setTravelStrategy(new BusStrategy());
		}
		else if("train".equalsIgnoreCase(travelType)) {
			ctx.setTravelStrategy(new TrainStrategy());
		}
		else if("auto".equalsIgnoreCase(travelType)) {
			ctx.setTravelStrategy(new AutoStrategy());
		}
		else if("taxi".equalsIgnoreCase(travelType)) {
			ctx.setTravelStrategy(new TaxiStrategy());
		}
		System.out.println("travel context has:"+ctx.getTravelStrategy());
		ctx.gotoAirport();
		sc.close();
	}
}